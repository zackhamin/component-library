const { readFileSync, writeFile, readdirSync } = require('fs');
const path = require('path');
const FileHound = require('filehound');
const prettier = require('prettier');

// Parse barrel.json file
// TODO: set default config and merge with custom config
const parseConfig = () => {
	try {
		const rawConfigData = readFileSync('barrel.json');
		const parsedConfig = JSON.parse(rawConfigData);
		return parsedConfig;
	} catch (error) {
		throw new Error('Please add a barrel.json config file');
	}
};

// Get all root sub-dirs
const getDirectories = (path) => {
	return readdirSync(path, { withFileTypes: true })
		.filter((dir) => {
			return dir.isDirectory() && !(dir.name === '__tests__');
		})
		.map((dir) => path + '/' + dir.name);
};

// Get all dirs and files and return formatted objects
const getFilesAndDirs = async (dir, ext, exclude) => {
	const rootFiles = await FileHound.create()
		.ext(ext)
		.paths(dir)
		.discard(exclude)
		.depth(0)
		.find();

	const rootDirs = getDirectories(dir);

	return [...formatFileNames(rootDirs), ...formatFileNames(rootFiles)];
};

// Remove extensions from file path strings
const removeExtension = (pathString) => {
	const { dir, name } = path.parse(pathString);
	return `${dir}/${name}`.replace('./', '');
};

// Get last item from path string and return formatted object
const convertToRelative = (path) => {
	const lastItemInPath = path.split('/').pop();
	return {
		path,
		parent: getParentDir(path),
		export: `./${lastItemInPath}`,
	};
};

const getParentDir = (path) => {
	const pathArr = path.split('/');
	pathArr.pop();
	return pathArr.join('/');
};

const formatFileNames = (files) => {
	return files.map((file) => {
		return convertToRelative(removeExtension(file));
	});
};

// Create data string based on files
const createDataString = (files) => {
	let data = `
/**
 * @file Automatically generated by barrel.ts script.
 */

`;

	if (files.length > 0) {
		files.forEach((file) => {
			data += `export * from '${file.export}'`;
			data += '\n';
		});
	}

	return data.trim();
};

const createIndexFile = async (files) => {
	const set = new Set();

	files.forEach((file) => {
		set.add(getParentDir(file.path));
	});

	const fileContent = createDataString(files);

	for (const item of set) {
		const indexPath = path.resolve(item + '/index.ts');
		const prettierConfig = await prettier.resolveConfig(indexPath);

		writeFile(
			indexPath,
			prettier.format(fileContent, {
				...prettierConfig,
				parser: 'babel',
				filePath: indexPath,
			}),
			(err) => {
				if (err) {
					throw new Error(err);
				}
			}
		);
	}
};

const main = async () => {
	const config = parseConfig();

	if (config.directory.length === 0) {
		console.error(
			'Please add some directories to the barrel.json directory array'
		);
	}

	config.directory.forEach(async (dir) => {
		const files = await getFilesAndDirs(dir, config.include, config.exclude);
		createIndexFile(files);
	});
};

main();
